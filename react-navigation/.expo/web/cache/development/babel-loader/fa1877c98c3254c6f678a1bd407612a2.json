{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\luiz.augusto\\\\Desktop\\\\entra21-luiz-augusto\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseEffectScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nexport function UseEffectScreen() {\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }, \"Adicione os exemplos desse Hook aqui\"));\n}\n\nfunction FriendStatus(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOnline = _useState2[0],\n      setIsOnline = _useState2[1];\n\n  useEffect(function () {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n\n  return isOnline ? 'Online' : 'Offline';\n}","map":{"version":3,"sources":["C:/Users/luiz.augusto/Desktop/entra21-luiz-augusto/react-navigation/screens/DrawerScreens/UseEffectScreen.js"],"names":["React","useState","useEffect","UseEffectScreen","FriendStatus","props","isOnline","setIsOnline","handleStatusChange","status","ChatAPI","subscribeToFriendStatus","friend","id","cleanup","unsubscribeFromFriendStatus"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAIA,OAAO,SAASC,eAAT,GAA2B;AAC9B,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADJ,CADJ;AAKH;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,kBAAgCJ,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOK,QAAP;AAAA,MAAiBC,WAAjB;;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACd,aAASM,kBAAT,CAA4BC,MAA5B,EAAoC;AAClCF,MAAAA,WAAW,CAACE,MAAM,CAACH,QAAR,CAAX;AACD;;AACDI,IAAAA,OAAO,CAACC,uBAAR,CAAgCN,KAAK,CAACO,MAAN,CAAaC,EAA7C,EAAiDL,kBAAjD;AAEA,WAAO,SAASM,OAAT,GAAmB;AACxBJ,MAAAA,OAAO,CAACK,2BAAR,CAAoCV,KAAK,CAACO,MAAN,CAAaC,EAAjD,EAAqDL,kBAArD;AACD,KAFD;AAGD,GATQ,CAAT;;AAWA,MAAIF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,YAAP;AACD;;AACD,SAAOA,QAAQ,GAAG,QAAH,GAAc,SAA7B;AACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ScrollView, Text } from \"react-native\";\r\n\r\nexport function UseEffectScreen() {\r\n    return (\r\n        <ScrollView>\r\n            <Text>Adicione os exemplos desse Hook aqui</Text>  \r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nfunction FriendStatus(props) {\r\n  const [isOnline, setIsOnline] = useState(null);\r\n\r\n  useEffect(() => {\r\n    function handleStatusChange(status) {\r\n      setIsOnline(status.isOnline);\r\n    }\r\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\r\n    // Especifique como limpar depois desse efeito:\r\n    return function cleanup() {\r\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\r\n    };\r\n  });\r\n\r\n  if (isOnline === null) {\r\n    return 'Loading...';\r\n  }\r\n  return isOnline ? 'Online' : 'Offline';\r\n}"]},"metadata":{},"sourceType":"module"}